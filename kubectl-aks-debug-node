#!/bin/bash

# Plugin name
PLUGIN_NAME="kubectl-aks-debug-node"

# Show help message
show_help() {
    echo "Usage: $PLUGIN_NAME"
    echo
    echo "Debugs a node in an Azure Kubernetes Service (AKS) cluster."
    echo
    echo "Prerequisites:"
    echo "  - You must be connected to an AKS cluster using 'az aks get-credentials'."
    echo "  - The cluster must allow 'kubectl debug' (Kubernetes >= 1.20)."
    echo
    echo "Example:"
    echo "  $PLUGIN_NAME"
    exit 0
}

# Handle --help flag
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
    show_help
fi

# Check if user is logged into Azure CLI
if ! az account show &>/dev/null; then
    echo "Error: You are not logged into Azure. Run 'az login' first."
    exit 1
fi

# Verify that AKS context is set
AKS_CONTEXT=$(kubectl config current-context 2>/dev/null)
if [[ -z "$AKS_CONTEXT" || "$AKS_CONTEXT" != *"aks"* ]]; then
    echo "Warning: Your current Kubernetes context ($AKS_CONTEXT) does not appear to be an AKS cluster."
    echo "Ensure you are connected using: az aks get-credentials --resource-group <RG> --name <AKS_CLUSTER>"
    exit 1
fi

# Check if kubectl debug is available
if ! kubectl debug --help &>/dev/null; then
    echo "Error: 'kubectl debug' is not supported on your cluster."
    echo "Ensure your AKS version is >= 1.20 and your cluster allows debugging."
    exit 1
fi

# List available nodes
echo "Available nodes in your AKS cluster:"
kubectl get nodes

# Prompt user for node name
echo -n "Enter the node name to debug: "
read NODE_NAME

# Validate input
if [ -z "$NODE_NAME" ]; then
    echo "Error: Node name cannot be empty."
    exit 1
fi

# Run the debug command
echo "Debugging node: $NODE_NAME..."
kubectl debug node/$NODE_NAME -it --image=mcr.microsoft.com/cbl-mariner/busybox:2.0 -- chroot /host

echo "Exited debug session for node: $NODE_NAME"
